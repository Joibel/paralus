// Code generated by vfsgen; DO NOT EDIT.

package fixtures

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Fixtures statically implements the virtual filesystem provided to vfsgen.
var Fixtures = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2023, 5, 22, 14, 47, 58, 754243964, time.UTC),
		},
		"/download.yaml": &vfsgen۰CompressedFileInfo{
			name:             "download.yaml",
			modTime:          time.Date(2023, 5, 22, 14, 47, 58, 754243964, time.UTC),
			uncompressedSize: 10183,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xd4\x5a\x5d\x6f\xdb\x38\xd6\xbe\xf7\xaf\x20\x74\x93\x99\x17\x23\xb7\x99\xbe\x2d\x0a\x01\x73\xa1\xda\x6e\x6b\x6c\xe2\x18\xb6\x33\x33\x8b\xc5\x22\xa0\xc9\x63\x9b\x1b\x8a\xd4\x90\x94\x63\x6d\xd0\xff\xbe\x20\xf5\x2d\xcb\x6e\x9c\xa6\xde\xae\x2f\x1a\x89\x3c\x3c\xe7\xe1\xf9\xa6\x58\xdf\xf7\x7b\x38\x66\xbf\x83\xd2\x4c\x8a\x00\x6d\x2f\x7b\xf7\x4c\xd0\x00\x4d\x70\x04\x3a\xc6\x04\x7a\x11\x18\x4c\xb1\xc1\x41\x0f\x21\x8e\x97\xc0\xb5\x7d\x42\x88\x48\x61\x94\xe4\x7e\xcc\xb1\x80\xa0\x78\xe5\xa0\xfc\x08\x0b\xbc\x06\xe5\xa8\x70\x1c\xf7\xef\x93\x25\x28\x01\x06\x74\x9f\xc9\x57\xd9\x2c\xf5\x97\x69\x80\x62\xac\x30\x4f\x74\x0f\x21\x81\x23\x28\xdf\x7d\x9d\x6a\x03\x51\xef\x20\xba\x39\xa8\x2d\x23\x10\x12\x22\x13\x61\x1a\x10\x33\x46\x19\x03\x5f\xe3\x7c\xc4\x6d\x65\x8f\x7f\x73\x43\x4f\x83\x6a\x31\x3d\x3e\xfa\x88\xad\x10\x16\x14\xf5\x07\x3c\xd1\x06\x54\xff\x3a\xc7\xd0\xbf\x72\x2c\xd1\x4f\xf0\x17\xfa\x89\x09\x0a\xbb\xc3\x34\x5e\xce\xb4\x4f\x61\xfb\xaa\x12\x3d\x55\x72\xcb\x28\x28\xef\x67\xe4\xdd\x4c\x47\x93\xf9\xe7\xf1\xc7\x85\xf7\x33\xfa\xf2\xa5\xa1\x0d\x0d\x24\x51\xcc\xa4\x7d\x19\x83\xd0\x1b\xb6\x32\x16\x73\x4d\x47\xd9\xf4\x40\x0a\x03\x3b\x33\x90\x42\x1b\x85\x99\x30\xba\x43\x5f\x85\x62\x62\xc5\xb6\x8c\x83\xdd\xb4\x26\xa4\x87\x10\x16\x42\x1a\x6c\x98\x14\xb9\x96\x98\x20\x3c\xa1\xd0\x57\xc0\x01\x6b\x68\x0a\x67\xcb\xc8\x27\x5c\x26\x34\xf7\x01\x1a\x20\xcf\xa8\x04\xbc\xaf\x2f\xd5\xc0\x57\xc5\x2a\x7f\xc3\xd6\x1b\x1f\x6f\x31\xe3\x78\xc9\x38\x33\xe9\x09\x7c\x98\x58\x73\xf0\x85\xa4\xe0\x53\xd8\x02\x97\x31\xa8\xc6\xf2\xa6\x8d\x29\x68\xa2\x58\x6c\x9c\x4a\x2f\xaa\xfd\x23\xcc\xb9\x7c\xd0\x08\x13\x02\x5a\x23\x23\xed\x00\xaa\xcf\x0b\x8a\x36\x52\x1b\xc7\x13\xa1\x15\x60\x93\x28\xd0\x6e\xdc\x6c\x00\xe5\xc8\xed\x4a\x95\x08\x84\xed\x4c\x8a\x12\x0d\xea\x17\xf7\xb4\x56\x32\x89\xb3\xc7\x95\xfe\x54\xbc\x50\xf4\xc0\xcc\x26\xe7\x69\xe7\xe6\xa3\x2b\x26\x92\x9d\x8b\x2f\xd8\x99\x3e\x42\x7f\x84\xb3\xc9\x78\xf2\x29\x40\x66\xc3\x34\x62\xda\x49\x8b\xa4\x36\x48\x01\xc7\x3b\xa0\x68\x3e\x18\x38\x56\x7a\x23\x13\x4e\xd1\x12\xac\x58\x9a\x33\x95\x82\xa7\x68\x25\x15\x22\x99\x57\x22\x4c\x23\x26\x98\x75\x0e\xab\x84\x3e\xfa\xa4\xb0\x30\x0e\x06\x22\x38\x71\x63\x17\x6e\x6d\xa7\xbe\x89\x02\x6c\xc0\xb7\x5c\x6b\x5a\xae\xc7\x95\x82\xd8\x7f\x90\xea\x9e\x4b\x6c\xfd\xa1\xdb\xd5\xbc\x13\x42\xd0\x59\xe6\xb3\xd4\x66\xc8\xd4\xef\x92\x27\x11\x4c\x79\xb2\x66\x22\x40\x56\x7c\x35\x3d\x9e\x0e\xda\x43\x13\x30\x16\x4a\x7b\x78\x3a\x1e\xee\x0d\x49\x65\x74\x7d\x70\x5a\xe0\x1d\x69\x82\x39\xce\x1c\xa6\x63\x9a\xda\x80\xc3\x4c\x58\xaf\xab\xa6\x81\x0e\x70\x9c\xb9\x04\x03\x1d\xf4\x7c\x74\xf1\x7f\x17\xc5\xd4\xad\xd0\x78\x05\xf3\x54\x13\xc3\xcb\x39\x0a\x2b\x9c\x70\x13\xd2\xe6\x4a\x24\x12\xce\x7b\xb9\xc7\x58\x05\x9b\x34\x86\x00\xcd\x12\x11\xea\x50\xa4\x3d\xe7\x56\x8e\x49\x96\xe4\x82\xdc\xcc\xbe\x33\xb3\xae\xc6\x6d\x84\xd4\x5e\x23\x6c\xa9\x74\x2f\x56\x4c\x2a\x17\x71\x4e\x90\x02\x4c\x6f\x04\x4f\x67\x52\x9a\x8f\x8c\x43\x4e\x8d\x56\x98\x6b\xe8\x29\xf8\x2b\x61\x0a\xe8\x50\xc9\xb8\x03\xa5\xb2\xa0\x6e\x35\xa8\x0e\x9c\x1a\x9c\x5f\xe7\xd9\xa9\x93\x80\x10\x19\xc5\x53\x25\x57\x56\x6e\xa1\x16\x9d\xc4\x31\x87\x08\x84\xc1\xfc\x53\xbe\xd7\xbd\xb5\x36\xca\xea\x3a\xd0\x59\xbd\xc0\x59\xbd\x08\x9a\x65\x20\xc8\x35\xfd\x54\xf2\xaa\xb6\x3c\x71\x01\x13\x6b\x05\x5a\xfb\x62\xcd\xc4\xee\x59\x8b\x9c\xf1\xb4\x4d\xfb\x4f\x5d\xbe\xc6\x06\xee\x01\xe2\xc2\xf0\xcf\x58\x97\xc4\xd4\x46\x76\x59\x3e\x7d\x17\xd4\xbd\xad\x8b\xb8\xd2\x1e\x45\x3d\x04\x41\xdb\x05\x4a\x2d\x31\xe9\xe3\xc4\x6c\xa4\x62\xff\xce\x92\xcb\xfd\x7b\xdd\x28\x52\x79\x65\x9c\x49\x0e\x87\xab\x52\x50\x35\x14\xa7\xd7\x6b\x95\xe4\xce\x83\x63\x56\xf9\x4b\x86\xdd\xe6\x26\x2d\x13\x45\xa0\x31\xb8\x05\xb5\xac\x0d\xf8\x48\x48\x31\xcb\x09\x6f\x67\x57\xc7\x69\x5b\x62\xf2\xe8\xeb\xd7\x2a\xfd\xbe\xd8\x52\xc5\xba\xc9\x31\xcb\xad\xee\x91\x02\x87\xfc\x71\x0d\xc6\xfd\xe5\x4c\x67\x0f\x31\x36\x64\xe3\x9e\x32\x93\xb9\xc7\x07\x37\xf8\xad\x78\x5e\x69\x83\x4d\xd2\x82\x55\x00\xd8\x93\xfb\x3c\x69\x06\xeb\x7b\x0e\xe6\x07\xd9\x7b\x81\xe6\x5c\x3b\xff\x81\xb6\x7d\xea\x9e\x5b\xdd\xf9\x69\xe1\xfe\x81\x09\xca\xc4\xfa\x48\xd4\xb7\x32\x53\x9e\x04\x7c\x25\x39\x2c\xf3\xc5\xcf\x4a\x08\x92\xc3\x0c\x56\x76\x49\xa1\xa8\x23\xd8\x7b\x08\xed\x67\xaa\x43\xf9\x49\x27\xcb\x7f\x01\x31\x2e\xdd\x74\x1e\x54\x4e\x3b\x9e\x7c\x85\x49\x51\xb6\x8e\xb2\xf8\x26\x1b\x1d\x33\x8e\x92\xbb\xd4\xd9\xe2\x45\xb3\xb2\x85\x06\xc2\x30\xd2\xb2\x41\xdb\x5b\xe5\x3d\x08\x05\x5b\x06\x0f\xdd\xf1\xd3\xc9\xb8\xc3\xb6\x2d\xbe\xb9\x01\xb3\x9e\xff\x28\xff\xf3\xfa\x7e\xa5\xed\xca\xf3\x5f\xf6\x58\xfb\x1d\xa2\xa2\xe6\x22\x3f\x7e\x60\x68\xb2\x01\x9a\x70\x26\xd6\x35\xc3\x35\xce\x86\x0b\x7b\xda\x2a\xba\x63\x44\x38\xd6\xba\x75\xc0\x72\xa7\xaa\x5c\x0e\xca\xdb\x2c\x14\x4b\xaa\xdd\x99\xab\x9f\xfb\xc1\x34\x67\x31\xb0\x1c\x8e\x1c\xc5\x8b\xbe\x9d\x28\x66\xe3\x81\x3f\xcb\xac\x5b\xcc\x13\x08\xd0\xe5\xeb\xe2\xf7\x1c\xcf\xfd\x4a\x2a\xe0\x80\x29\x28\x1f\x38\x10\xbb\xbc\x48\x0a\x2f\xec\x9f\x07\x12\x86\xe7\xed\x47\x31\x91\x62\xc5\xd6\x11\x8e\x0f\x54\xb2\xb2\x8a\x3e\x94\x25\xad\x56\x76\x6b\x05\xb5\x2a\x79\x79\x2d\x3e\x51\xfc\xd1\x7a\xba\x27\xe7\x49\xcc\x61\x0b\xc2\xbc\x58\x4e\x7a\x5a\x32\xea\x32\xf0\x0f\x96\x87\x3a\x13\x50\xa7\x63\xfe\xf8\xa9\xa8\xaa\x18\xce\x91\xae\x71\xdc\x65\x1b\x97\x5c\x33\x57\x7b\x71\x23\x14\xa2\x36\xc6\xd8\xf3\xf7\x2e\x0d\x90\xf7\xf8\xc8\x56\xd5\x97\xcc\x79\x0c\xa4\xef\xa6\x32\x90\x5f\xbe\x3c\x3e\xa2\x63\x04\xfd\x91\xc0\x4b\x0e\xf6\x8c\x68\x4f\x8b\x87\xe9\x3e\x17\x32\x91\x6f\x49\x41\xd0\xf2\x8f\x97\x43\xd2\xff\x0d\x4c\xfa\x08\x28\x21\xcf\x8d\x68\x22\x8f\xc0\x71\xbe\x11\x26\x66\x73\x46\x40\xd3\x42\x66\x37\xa4\xa5\x94\x46\x1b\x85\xe3\x41\x78\x46\x50\x1f\x2a\xa9\xdd\xb0\xdc\xf7\xb7\xb1\x70\x5f\xd2\xa1\xa4\x7e\x51\x84\xe8\x38\xc4\xb0\x13\x41\x17\xda\x67\xa5\x09\x05\x1c\xa7\x3e\x5e\x83\x30\xdf\x3b\x59\xe4\xfd\xca\x78\x18\xa0\xa6\xf6\x5a\xb7\x1e\x99\xf2\x4e\xb8\x18\x29\x19\x7b\xa8\x54\x87\x2b\x8c\x1c\xa7\x3a\x40\x17\x07\xa4\x85\xd5\xcd\x45\xe6\x27\x87\x64\xd6\x08\x91\x97\x71\xf5\x6a\x06\xb8\xd8\xd3\x3c\x8e\x63\x5d\xd5\xd0\x21\xc4\x5c\xa6\x11\x74\xde\x43\xd5\xf4\xff\xe2\x8a\xd7\x31\x10\x4b\xaf\x5d\x81\x93\x2a\x5b\x1b\xd9\x5e\xe2\xaa\xc6\xcc\xb1\x6b\x23\x51\x10\x73\x46\xb0\x0e\xd0\x65\x96\x30\xdc\xc7\xc6\x21\x60\xca\x99\x80\x39\x10\x29\xa8\x9d\x7c\xff\xfa\x75\x0f\x21\x03\x51\xcc\xb1\x81\x5c\x42\x6d\x97\xf6\xc7\x1b\xc2\x3a\xc5\x21\x54\x80\x75\x04\xab\x15\x13\xcc\xa4\xd5\x12\x21\x29\x84\x7b\xa3\x16\x66\xfe\x7d\x39\x51\x4c\xac\xe7\x65\x8f\x3e\x5e\x0b\x59\x0e\x8f\x76\x40\xdc\x35\x45\x7d\x65\xc6\x73\x9e\xab\x66\x01\x2a\xd2\xcd\x69\xdb\x38\x39\x5d\x8d\x76\xb1\xdd\x7b\x75\xc3\xd5\xa6\xba\x87\x34\x68\x5d\x1a\x49\xdd\x41\x89\x90\x8c\x41\x61\x6b\x09\x34\x16\x9d\x04\xae\x1d\xef\x14\x93\x89\xe2\x4c\x24\xbb\xa7\x82\xc0\x8a\x6c\xbe\x0f\x0c\x1c\xd1\x77\xff\x7f\x78\x56\x45\xe5\xac\x01\x15\x31\xe1\x82\xe7\x93\xc2\x04\xa6\xa0\x98\xa4\x95\xff\xbc\xce\xe9\xe2\xfa\xa1\x67\xf2\xb5\x73\x8e\x73\x98\x46\x43\x35\xd9\x6b\xc9\xb2\x8b\x40\x66\xca\xdb\x96\x72\x3f\x7e\xd1\xc0\x81\xf1\x39\x8b\x98\xa9\x8c\xc5\x22\xbc\x86\x00\x79\xcb\x44\xa7\x4b\xb9\x0b\x2e\xfb\x6f\xde\x78\xe5\x2c\x91\x51\x84\x6d\x48\xff\xc3\xd3\x1b\xef\x17\xe4\xf9\xc4\xfe\x9b\x38\x26\xc8\x17\xe8\xdd\xdb\xb7\x6f\xde\x79\xff\x2c\x17\xe8\xe6\x15\x6b\x5d\xa1\xd5\xed\x56\x7e\x0b\x54\x88\x38\x84\xb6\x1d\x30\x75\xb8\x8f\x8f\xa8\x3f\x94\x0f\x82\x4b\x4c\x87\x36\x65\xcd\x2c\x71\x68\x69\xc7\x96\x04\x65\xd5\x2c\x8f\x2e\xb5\xd6\x76\x0b\xbe\x1f\x49\x0a\xbf\x11\xce\x40\x18\xb7\x1b\x9f\xcb\xb5\xcf\x61\x0b\xfc\xb7\x37\xb5\x5d\x80\xd8\x56\xc8\x0b\x38\xd3\x9b\xe1\xdd\x24\xbc\x1e\xf5\x5a\x5e\xf3\x51\xc9\xa8\xe9\x38\x2b\x06\x9c\xe6\x2d\xfb\xde\xf8\x14\xdb\x2e\xa4\xc8\x18\x7d\xcb\xfb\xa0\xa8\xf9\x34\x1c\x7c\x07\x79\xd9\xff\x62\x68\x0b\xbd\x0e\xff\xbc\x1b\x8e\xc3\xab\xf9\xd7\x05\x92\xa2\xbe\xfe\x0d\xd2\x0e\xb9\x47\x0a\x6d\xfd\xe7\x02\x38\xc2\xbb\x21\xc3\xbc\x9d\x3d\xa4\xfb\xc4\x80\x79\xc3\x55\x2a\xac\x16\xe7\xcd\xed\xe2\x6e\x3a\xbb\xf9\xf3\xef\x2f\x84\xb7\x75\x7e\xd8\x43\x5a\xf5\xd9\xdf\x80\xf5\x2e\xbc\x5d\x7c\x1e\x4d\x16\xe3\x41\xb8\x18\xdf\x4c\xce\x04\xbd\x6c\x7f\x4f\x43\xfe\x79\xb1\x98\x9e\x5d\xc5\xcf\xd0\xb0\xc5\x39\xff\x9f\xf0\x85\xc9\xcd\x59\x61\xe6\xa7\xb0\xd3\x30\x7e\xb8\xb9\x59\xcc\x17\xb3\x70\x7a\x37\x08\xef\x06\xa3\xd9\xe2\x4c\x60\x6b\x07\xa2\xd3\x00\x87\x57\x57\x37\x7f\xdc\x8d\x27\xf3\xd1\xe0\x76\x36\xba\x2b\xf1\x9f\x09\x77\xf7\x89\xe9\x69\x5b\xc8\x6e\x8e\xaf\x6d\x3d\x6f\x34\x1f\xfe\xd3\x72\x68\x64\x17\x66\x09\xfe\x15\x18\xf2\xaa\x45\xd2\xf8\x50\x56\x6f\x20\x41\x9b\x56\xaf\x43\xe2\xc4\x7d\x13\x8d\x9a\xfc\x21\x92\x2a\x0d\xd0\xe5\xaf\xef\xaf\x59\x6d\x26\xeb\x21\x3a\x38\xbc\x3d\xc4\xe1\xed\xe5\xaf\xd7\xcc\x8d\xf4\xea\x3b\x3f\x56\xf3\xdb\x1b\x2e\x8d\x55\x97\x7b\x70\xd5\x7f\x02\x00\x00\xff\xff\xfd\x7e\x09\x3d\xc7\x27\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/download.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
